# 题目描述：

输入一个链表，输出该链表中倒数第k个结点。

**注意：**

- `k >= 0`;
- 如果k大于链表长度，则返回 NULL;

#### 样例

```
输入：链表：1->2->3->4->5 ，k=2

输出：4
```

# 解题思路：

## 1.

### 来源

​	自己

### 原理

 逆序k == 顺序n-k

### 思路

​	先查找总链表长度，然后在顺序求n-k的链表节点。要求遍历两次。

### 时间复杂度

2*o（n）

## 代码

```cpp
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* findKthToTail(ListNode* pListHead, int k) {
        int n = flength(pListHead);
        if(n < k) return nullptr;
        for(int i = 0; i < n-k ;i++ )  pListHead = pListHead->next;
        return pListHead;
    }
    int  flength(ListNode* node){
        int _length = 0;
        while(node){
            node = node->next;
            _length++;
        }
        return _length;
    }
};
```



## 2.

### 来源

​	剑指offer

### 原理

​	双指针

### 思路

​	当快指针走到k的位置后，再一起快慢指针一起走。再走n-k的位置。

### 时间复杂度

​	o（n)

## 代码

```cpp
/**

 * Definition for singly-linked list.
 * struct ListNode {
 * int val;
 * ListNode *next;
 * ListNode(int x) : val(x), next(NULL) {}
 * };
   */
   class Solution {
   public:
   ListNode* findKthToTail(ListNode* pListHead, int k) {
       if(k == 0)  return nullptr;//提高代码的robust
       ListNode* fast = pListHead;
       ListNode* slow = pListHead;
       while(fast&&k){
           fast = fast->next;
           k--;
       }
       if(k>0) return nullptr;
       while(fast){
           fast = fast->next;
           slow = slow->next;
       }
       return slow;
   }
   };

```

## 3.

### 来源

### 思路



### 时间复杂度

## 代码



